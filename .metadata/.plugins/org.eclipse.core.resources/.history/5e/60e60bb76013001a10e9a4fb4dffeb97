package com.cognizant.Vehicle_RS;

import static org.junit.Assert.assertEquals;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import com.cognizant.Vehicle_RS.model.Vehicle;
import com.cognizant.Vehicle_RS.repository.VehicleRepository;
import com.cognizant.Vehicle_RS.service.AppUserDetailsService;
import com.cognizant.Vehicle_RS.service.BookingService;
import com.cognizant.Vehicle_RS.service.VehicleService;

@RunWith(SpringRunner.class)
@SpringBootTest
@FixMethodOrder
public class VehicleRsApplicationTests {
	
	@Autowired
	private VehicleService vehicleService;
	
	@Autowired
	private BookingService bookingService;
	
	@Autowired
	private AppUserDetailsService appUserDetailsService;
	
	@Autowired
	private VehicleRepository vehicleRepository;

	@Test
	public void addVehicleTest(){
		
		Vehicle vehicle= new Vehicle(35, "Merc AMG", "hello", "ASDFGHJK","2", "petrol", 356, true, "VD", new Date(2019, 02, 02), new Date(2019, 02, 02), new Date(2019, 02, 02), false);
		vehicleService.newVehicle(vehicle);
		Optional<Vehicle> result=vehicleRepository.findByName("Merc AMG");
		assertEquals(result.isPresent(), true);
		Vehicle vehicle1= result.get();
		vehicle1.setStatus(true);
		vehicle1.setImage("Bye");
		vehicle1.setActive(false);
		vehicleService.modifyVehicle(vehicle);
		Optional<Vehicle> res2=vehicleRepository.findById(vehicle.getId());
		Vehicle vehicle2=res2.get();
		assertEquals(vehicle2.getImage(), "Bye");
		assertEquals(vehicle2.isStatus(), true);
		assertEquals(vehicle2.isActive(), false);
		assertEquals(vehicle2.getBranch(),"VD");
	
	}
	
	@Test
	public void getAllVehicleTest(){
		List<Vehicle> vehicle= vehicleService.getAllVehicle();
		assertEquals(vehicle.isEmpty(), false);
	}
	@Test
	public void modifyVehicleTest(){
		Optional<Vehicle> result=vehicleRepository.findByName("Merc AMG");
		Vehicle vehicle= result.get();
		vehicle.setStatus(true);
		vehicle.setImage("Bye");
		vehicle.setActive(false);
		vehicleService.modifyVehicle(vehicle);
		Optional<Vehicle> res2=vehicleRepository.findById(vehicle.getId());
		Vehicle vehicle2=res2.get();
		assertEquals(vehicle2.getImage(), "Bye");
		assertEquals(vehicle2.isStatus(), true);
		assertEquals(vehicle2.isActive(), false);
		assertEquals(vehicle2.getBranch(),"VD");
		
	}
	@Test
	public void deleteVehicleTest(){
		Optional<Vehicle> result=vehicleRepository.findByName("Merc AMG");
		Vehicle vehicle= result.get();
		vehicleService.deleteVehicle(vehicle.getId());
		assertEquals(result.isPresent(), false);
	}
	


}
